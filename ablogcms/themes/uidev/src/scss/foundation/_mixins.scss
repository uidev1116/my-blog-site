@use "sass:math";

@use "global/variables" as global;
@use "global/acms-variables" as acms;

// ------------------------------
// フォントサイズ
// ------------------------------

@mixin font-size($sizeValue){
	font-size: $sizeValue + px;
	font-size: (math.div($sizeValue, 16)) * 1rem;
}
@mixin font-size-important($sizeValue){
	font-size: $sizeValue + px!important;
	// font-size: ($sizeValue / 10) * 1rem!important;
}

// ------------------------------
//　ユーティリティ
// ------------------------------
@mixin visually-hidden(){
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
  clip: rect(0 0 0 0);
}

@mixin opacity($opacity){
  opacity: $opacity;
}

@mixin box-sizing($boxmodel){
  box-sizing: $boxmodel;
}

// ------------------------------
// clearfix
// ------------------------------
@mixin clearfix(){
  &:before,
  &:after {
    display: table;
    content: " ";
  }
  &:after {
    clear: both;
  }
}

// ------------------------------
//　ボーダー
// ------------------------------
@mixin dotted($position: left,$color:rgba(#000, 1.0), $stripe: 1, $spacing: 4, $width:1) {
  border: none;
  @if $position == left or $position == right {
    background: -webkit-linear-gradient(top, $color 0%, $color $stripe/($stripe+$spacing)*100%, transparent $stripe/($stripe+$spacing)*100%, transparent 100%);
    background: linear-gradient(to bottom, $color 0%, $color $stripe/($stripe+$spacing)*100%, transparent $stripe/($stripe+$spacing)*100%, transparent 100%);
    background-repeat: repeat-y;
    background-size: ($width)*1px ($stripe+$spacing)*1px;
    background-position: $position ($stripe)*1px;
  } @else if $position == top or $position == bottom {
    background: -webkit-linear-gradient(right, $color 0%, $color $stripe/($stripe+$spacing)*100%, transparent $stripe/($stripe+$spacing)*100%, transparent 100%);
    background: linear-gradient(to left, $color 0%, $color $stripe/($stripe+$spacing)*100%, transparent $stripe/($stripe+$spacing)*100%, transparent 100%);
    background-repeat: repeat-x;
    background-size: ($stripe+$spacing)*1px ($width)*1px;
    background-position: ($stripe)*1px $position;
  }
}

// ------------------------------
//　タイポグラフィ
// ------------------------------
@mixin heading-large($entry,$decoration) {
  @if $entry == true {
    margin: 0 $grid-space $entry-element-margin-bottom-md $grid-space;
  } @else {
    margin: 0 0 $entry-element-margin-bottom-md 0;
  }
  color: #333;
  @if $decoration == true {
    padding: 5px 10px;
    @include global.font-size(22);
    @include acms.dotted($position: bottom,$color:map-get(global.$color-secondary, base), $stripe: 1, $spacing: 5, $width:1);
    border-left: 8px solid map-get(global.$color-primary, base);
  } @else {
    @include global.font-size(26);
  }
}

@mixin heading-medium($entry,$decoration) {
  @if $entry == true {
    margin: 0 $grid-space 20px $grid-space;
  } @else {
    margin: 0 0 20px 0;
  }
  @include global.font-size(20);
  color: #333;
  @if $decoration == true {
    position: relative;
    @include global.font-size(20);
    background: -webkit-linear-gradient(top, transparent 70%, map-get(global.$color-primary, base) 0);
    background: linear-gradient(transparent 70%, map-get(global.$color-primary, base) 0);
  }
}

@mixin heading-small($entry,$decoration) {
  @if $entry == true {
    margin: 0 $grid-space 20px $grid-space;
  } @else {
    margin: 0 0 20px 0;
  }
  @include global.font-size(18);
}

// マーカー
@mixin marker($color: map-get(global.$color-primary, base), $height: 45%){
  position: relative;
  font-weight: normal;
  font-style: normal;
  background: linear-gradient(transparent $height, $color 0);
}



// ------------------------------
//　テキストの切り捨て
// ------------------------------
@mixin truncation(){
  display: block;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


// ------------------------------
//　画像
// ------------------------------
//レスポンシブイメージ
@mixin responsive-image() {
  display: block;
  max-width: 100%;
  height:auto;
}


// ------------------------------
// 三角形
// ------------------------------
/// @param $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param $color [currentcolor] - Triangle color
/// @param $width [10px] - Triangle width
/// @param $height [10px] - Triangle height
@mixin triangle ($direction: bottom, $color:currentcolor, $width:10px, $height:10px) {
  display: inline-block;
  width: 0px;
  height: 0px;
  content: "";

  @if $direction == top {
    border-top: 0;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-bottom: $height solid $color;
  } @else if $direction == right {
    border-right: 0;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
    border-left: $height solid $color;
  } @else if $direction == bottom {
    border-bottom: 0;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-top: $height solid $color;
  } @else {
    border-left: 0;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
    border-right: $height solid $color;
  }

}

// ---------------
//　ボタン
// ---------------
// ベース
@mixin btn-base(
  $color-text: map-get(global.$color-btn-plain, text),
  $color-text-hover: map-get(global.$color-btn-plain, text-hover),
  $color-border: map-get(global.$color-btn-plain, border),
  $color-border-hover: map-get(global.$color-btn-plain, border-hover),
  $color-bg: map-get(global.$color-btn-plain, bg),
  $color-bg-hover: map-get(global.$color-btn-plain, bg-hover),
  ){

  display: inline-block;
  padding: .5em 1em;
	font-weight: global.$font-base-weight-bold;
	line-height: 1.3;
  background-color: $color-bg;
	border: 1px solid $color-border;
  border-radius: 5px;
  transition: all .2s linear;
  &,
  &:link,
  &:focus,
  &:active {
    color: $color-text;
    text-decoration: none;
  }
  &:visited {
    color: $color-text;
  }
  &:hover {
    color: $color-text-hover;
    text-decoration: none;
    background-color: $color-bg-hover;
    border-color: $color-border-hover;
  }
}

// ------------------------------
//リスト
// ------------------------------
// スタイルリセット
@mixin list-unstyled() {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
}

// ------------------------------
//リンク
// ------------------------------
// スタイルリセット
@mixin link-unstyled($color: inherit) {
  color: $color;

  &,
  &:link,
  &:focus,
  &:active {
    color: $color;
    text-decoration: none;
  }
  &:visited {
    color: $color;
  }
  &:hover {
    color: $color;
    text-decoration: none;
  }
}

// ------------------------------
//　hover
// ------------------------------
// ホバーすると透過
@mixin hover-opacity($color: inherit) {
  transition: global.$hover-default-opacity;

  &,
  &:link,
  &:focus,
  &:active {
    color: $color;
    text-decoration: none;
  }

  &:visited {
    color: $color;
  }

  &:hover {
    color: $color;
    text-decoration: none;
    opacity: global.$hover-opacity;
  }
}

// ホバーするとcolorが変わる
@mixin hover-color($color: map-get(global.$color-label, base), $color-hover: map-get(global.$color-label, base-hover)) {
  transition: global.$hover-text-transition;

  &,
  &:link,
  &:focus,
  &:active {
    color: $color;
    text-decoration: none;
  }

  &:visited {
    color: $color;
  }

  &:hover {
    color: $color-hover;
  }
}

// 色固定&ホバー時にアンダーライン
@mixin hover-underline-colorfix(
  $color: currentColor,
  ){

  &,
  &:link,
  &:focus,
  &:active {
    color: $color;
    text-decoration: none;
    border-bottom: 1px solid transparent;
  }

  &:visited {
    color: $color;
  }

  &:hover {
    color: $color;
    text-decoration: underline;
  }
}

// 色固定&ホバー時に下ボーダー
@mixin hover-underline-colorfix(
  $color: currentColor,
  $color-border: $color,
  ){

  &,
  &:link,
  &:focus,
  &:active {
    color: $color;
    text-decoration: none;
    border-bottom: 1px solid transparent;
  }

  &:visited {
    color: $color;
  }

  &:hover {
    color: $color;
    border-bottom-color: $color-border;
  }
}

// ------------------------------
// 棒がない矢印 >
// ------------------------------
@mixin arrow-stickless($size: 8px, $transform: rotate(135deg), $border-width: 1px) {
  display: block;
  box-sizing: border-box;
  width: $size;
  height: $size;
  border-top: $border-width solid;
  border-left: $border-width solid;
  transform: $transform; // 左矢印 < は rotate(-45deg) を指定
}

// ------------------------------
//　エントリー内：左右の余白をつめる
// ------------------------------
@mixin entry-fluid-box($padding-top-bottom: 20px, $padding-right-left: 40px) {
  padding: $padding-top-bottom $padding-right-left;

  @media screen and (max-width: $container) {
    margin-right: (acms.$grid-space / -2);
    margin-left: (acms.$grid-space / -2);
    padding-right: (acms.$grid-space / 2);
    padding-left: (acms.$grid-space / 2);
  }
}

// ------------------------------
//　グリッド
// ------------------------------
$breakpoints: (
  xs: 0,
  sm: acms.$breakpoint-sm-min,
  md: acms.$breakpoint-md-min,
  lg: acms.$breakpoint-lg-min,
  xl: acms.$breakpoint-xl-min
);

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin make-col-ready() {
  flex-shrink: 0;
  box-sizing: border-box;
  width: 100%;
  max-width: 100%;
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col($size, $columns: acms.$acms-columns) {
  flex: 0 0 auto;
  width: percentage(math.div($size, $columns));
}

@mixin make-grid-columns(
  $columns: acms.$acms-columns,
  $breakpoints: $breakpoints
) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .l-grid-col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .l-grid-col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .l-grid-col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }
    }
  }
}

